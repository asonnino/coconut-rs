package proofs

import (
	"fmt"
	"github.com/consensys/gurvy/bls381/fr"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
)

func reverse(bytes []byte) []byte {
	bytesNew := make([]byte, len(bytes))
	for i := 0; i < len(bytes)/2; i++ {
		j := len(bytes) - i - 1
		bytesNew[i], bytesNew[j] = bytes[j], bytes[i]
	}
	return bytesNew
}

func TestReverseBytes(t *testing.T) {
	input :=
		[]byte{112, 195, 144, 117, 91, 159, 19, 97,
			158, 40, 195, 160, 95, 111, 123, 170,
			19, 60, 13, 246, 124, 174, 39, 110,
			167, 188, 49, 163, 33, 114, 153, 249}

	output := []byte{249, 153, 114, 33, 163, 49, 188, 167,
		110, 39, 174, 124, 246, 13, 60, 19,
		170, 123, 111, 95, 160, 195, 40, 158,
		97, 19, 159, 91, 117, 144, 195, 112}

	assert.Equal(t, reverse(input), output)
}

//funcTestBasic(t *testing.T) {
//	int42 := big.NewInt(42)
//	int512 := big.NewInt(512)
//	mod := fr.Modulus()
//
//	var res big.Int
//	res.Exp(int42, int512, mod)
//
//	fmt.Println(res)
//	fmt.Println(res.Bytes())
//	fmt.Println(res.String())
//
//
//	fmt.Println("")
//
//	var foo fr.Element
//	foo.SetBigInt(&res)
//
//	bar := foo.ToMont()
//
//	fmt.Println(bar)
//	fmt.Println(bar.Bytes())
//	fmt.Println(bar.String())
//
//	var fr42 fr.Element
//	fr42.SetUint64(42)
//
//	//var fr512 fr.Element
//	//fr42.SetUint64(512)
//
//	var resFr fr.Element
//	resFr.Exp(fr42, int512)
//
//	fmt.Println(resFr)
//	fmt.Println(resFr.Bytes())
//	fmt.Println(resFr.String())
//
//
//	//assert.Equal(t, res, rustRes)
//
//
///*
//42 ^ 512
//go:
//   {false [12086590076666157561 1385998137628174190 11396573950624365482 8125496986429231969]}
//   [112 195 144 117 91 159 19 97 158 40 195 160 95 111 123 170 19 60 13 246 124 174 39 110 167 188 49 163 33 114 153 249]
//   51004571234394176832463279876548201369249893565884470427882439455118619482617
// */
//// GO BYTES
////[112 195 144 117 91 159 19 97
////158 40 195 160 95 111 123 170
////19 60 13 246 124 174 39 110
////167 188 49 163 33 114 153 249]
//
//// RUST BYTES
////[249, 153, 114, 33, 163, 49, 188, 167,
////110, 39, 174, 124, 246, 13, 60, 19,
////170, 123, 111, 95, 160, 195, 40, 158,
////97, 19, 159, 91, 117, 144, 195, 112]
//
//	/*
//	rust:
//	0x70c390755b9f13619e28c3a05f6f7baa133c0df67cae276ea7bc31a3217299f9
//	(51004571234394176832463279876548201369249893565884470427882439455118619482617)
//	A [12744553619634797806, 2812099285984544638, 10023149335646001754, 7871652299959646057]
//	[249, 153, 114, 33, 163, 49, 188, 167, 110, 39, 174, 124, 246, 13, 60, 19, 170, 123, 111, 95, 160, 195, 40, 158, 97, 19, 159, 91, 117, 144, 195, 112]
//	*/
//	//	int42 := big.NewInt(42)
//
//}

func TestBar(t *testing.T) {
	data := []byte{1, 2, 3, 4}
	var bytes [64]byte
	copy(bytes[60:], data)

	scalar := scalarFromBytesWide(bytes)

	_ = scalar

	/*
		S [8296047984791007455 6749167863319126124 990660411030559962 3728100482992396851]
		S 32322818407927025939359778789648808124910768125310499785920609756176927828016
		S [51 188 223 163 15 185 90 51
		13 191 136 101 36 132 220 218
		93 169 220 105 190 158 96 108
		115 33 123 176 21 16 48 223]
	*/

	// RUST:
	/*
		s: 0x47761120765ceabc0a4bc3208cb1d2c267f6dfccbc1a2b3e7c99b29760622830
		32322818407927025939359778789648808124910768125310499785920609756176927828016
		A [8296047984791007455, 6749167863319126124, 990660411030559962, 3728100482992396851]
		s: [48, 40, 98, 96, 151, 178, 153, 124,
		62, 43, 26, 188, 204, 223, 246, 103,
		194, 210, 177, 140, 32, 195, 75, 10,
		188, 234, 92, 118, 32, 17, 118, 71]

	*/

	int42 := big.NewInt(42)

	var res big.Int
	res.Mul(&scalar, int42)
	res.Mod(&res, fr.Modulus())

	fmt.Println("s * 42")
	fmt.Println(res)
	fmt.Println(res.Bytes())
	fmt.Println(res.String())

	fmt.Println("big s", reverse(scalar.Bytes()))
	fmt.Println("big s*42", reverse(res.Bytes()))

	//var sfr fr.Element
	//sfr.SetBigInt(&scalar)
	//
	//var resfr fr.Element
	//resfr.SetBigInt(&res)
	//
	//sfrMont := sfr.ToMont().Bytes()
	//fmt.Println(reverse(sfrMont[:]))
	//
	//resFrMont := resfr.ToMont().Bytes()
	//fmt.Println(reverse(resFrMont[:]))

	//var foo fr.Element
	//foo.SetUint64(42)
	//sfr.Mul(&sfr, &foo)
	//
	//fmt.Println("")
	//fmt.Println(sfr)
	//fmt.Println(sfr.Bytes())
	//fmt.Println(sfr.String())
	//
	//reg := sfr.ToRegular()
	//fmt.Println("")
	//fmt.Println(reg)
	//fmt.Println(reg.Bytes())
	//fmt.Println(reg.String())
	//
	//mont := sfr.ToMont()
	//fmt.Println("")
	//fmt.Println(mont)
	//fmt.Println(mont.Bytes())
	//fmt.Println(mont.String())

	/*
		{false [16392622111759795332 8829484242331851228 12059285235186731891 6216916815320579404]}
		[86 70 236 231 167 85 253 76
		167 91 48 7 80 107 11 115 122
		136 161 35 70 25 89 220 227
		126 74 245 116 168 4 132]
		39024219330203445705008953115951701901138376081274304896554939907981355517060

		rust:
		[199, 151, 26, 208, 238, 76, 55, 113,
		89, 28, 116, 220, 75, 179, 251, 224,
		95, 123, 94, 36, 142, 234, 199, 175,
		204, 70, 221, 90, 52, 120, 41, 103]
		A [16392622111759795332, 8829484242331851228, 12059285235186731891, 6216916815320579404]
		"0x672978345add46ccafc7ea8e245e7b5fe0fbb34bdc741c5971374ceed01a97c7"
		46661493754780327466917196460600795303988448749850045443574142260966439163847

	*/
}

/*
	s: 0x47761120765ceabc0a4bc3208cb1d2c267f6dfccbc1a2b3e7c99b29760622830
	// 32322818407927025939359778789648808124910768125310499785920609756176927828016
	A [8296047984791007455, 6749167863319126124, 990660411030559962, 3728100482992396851]
	s: [48, 40, 98, 96, 151, 178, 153, 124, 62, 43, 26, 188, 204, 223, 246, 103, 194, 210, 177, 140, 32, 195, 75, 10, 188, 234, 92, 118, 32, 17, 118, 71]
	FOO
	A [16392622111759795332, 8829484242331851228, 12059285235186731891, 6216916815320579404]
	[199, 151, 26, 208, 238, 76, 55, 113, 89, 28, 116, 220, 75, 179, 251, 224, 95, 123, 94, 36, 142, 234, 199, 175, 204, 70, 221, 90, 52, 120, 41, 103]
	A [16392622111759795332, 8829484242331851228, 12059285235186731891, 6216916815320579404]
	"0x672978345add46ccafc7ea8e245e7b5fe0fbb34bdc741c5971374ceed01a97c7"
	// 46661493754780327466917196460600795303988448749850045443574142260966439163847

*/

// S * R2:
/*
	[48, 40, 98, 96, 151, 178, 153, 124, 62, 43, 26, 188, 204, 223, 246, 103, 194, 210, 177, 140, 32, 195, 75, 10, 188, 234, 92, 118, 32, 17, 118, 71]
	A [8296047984791007455, 6749167863319126124, 990660411030559962, 3728100482992396851]
	"0x47761120765ceabc0a4bc3208cb1d2c267f6dfccbc1a2b3e7c99b29760622830"

*/

/*
	[5772124784913469713 7663226165015037990 7941542561010858113 5891736062722983754]
	[15377295299947265555 11866597177142752123 2865323576900066876 2946480369092617893]

*/

// expected:
/*
	A [8296047984791007455, 6749167863319126124, 990660411030559962, 3728100482992396851]

		[48, 40, 98, 96, 151, 178, 153, 124, 62, 43, 26, 188, 204, 223, 246, 103, 194, 210, 177, 140, 32, 195, 75, 10, 188, 234, 92, 118, 32, 17, 118, 71]
	"0x47761120765ceabc0a4bc3208cb1d2c267f6dfccbc1a2b3e7c99b29760622830"
*/

// to big regular:
// [40 228 0 72 217 109 102 165 39 195 172 156 175 174 30 60 164 174 159 66 188 63 51 123 213 103 32 154 87 163 254 19]

// to big:
//[81 195 166 187 184 246 71 74 110 54 6 226 21 178 184 129 106 89 63 152 119 51 72 38 80 26 180 232 235 254 209 17]

//fmt.Println(scalar.Bytes())

//}
//
//func TestFoo(t *testing.T) {
//	data := [][]byte{
//		[]byte{1,2,3,4,5},
//		[]byte{6,7,8,9,10},
//	}
//
//	res := constructChallenge(data)
//	bytes := res.Bytes()
//	fmt.Println(res.String())
//	fmt.Println(bytes)
//}

//	/*
//		"0x3b73bf21ecddda0b9619cdfa8297f9cd1473d1616e0638d652f0d0dd7e246ce4"
//		[228, 108, 36, 126, 221, 208, 240, 82, 214, 56, 6, 110, 97, 209, 115, 20, 205, 249, 151, 130, 250, 205, 25, 150, 11, 218, 221, 236, 33, 191, 115, 59]
//
//	*/
//
//
//	// 2^256 mod q
//	// 2^512 mod q
//	// 2^768 mod q
//
//	/*
//	/// R = 2^256 mod q
//	const R: Scalar = Scalar([
//	    0x0000_0001_ffff_fffe,
//	    0x5884_b7fa_0003_4802,
//	    0x998c_4fef_ecbc_4ff5,
//	    0x1824_b159_acc5_056f,
//	]);
//
//	/// R^2 = 2^512 mod q
//	const R2: Scalar = Scalar([
//	    0xc999_e990_f3f2_9c6d,
//	    0x2b6c_edcb_8792_5c23,
//	    0x05d3_1496_7254_398f,
//	    0x0748_d9d9_9f59_ff11,
//	]);
//
//	/// R^3 = 2^768 mod q
//	const R3: Scalar = Scalar([
//	    0xc62c_1807_439b_73af,
//	    0x1b3e_0d18_8cf0_6990,
//	    0x73d1_3c71_c7b5_f418,
//	    0x6e2a_5bb9_c8db_33e9,
//	]);
//
//	*/
//
//	//var r = fr.Element{}
//	//r[0] = 8589934590
//	//r[1] = 6378425256633387010
//	//r[2] = 11064306276430008309
//	//r[3] = 1739710354780652911
//	//
//	//// R^2 = 2^512 mod q
//	//var r2 = fr.Element{
//	//	14526898881837571181,
//	//	3129137299524312099,
//	//	419701826671360399,
//	//	524908885293268753,
//	//}
//	//
//	//// R^3 = 2^768 mod q
//	//var r3 = fr.Element{
//	//	14279814937963099055,
//	//	1963020886675057040,
//	//	8345518043873801240,
//	//	7938258146690806761,
//	//}
//	//
//	//// expected:
//	//// 14279814937963099055
//	//// 1963020886675057040
//	//// 8345518043873801240
//	//// 7938258146690806761
//	//
//	//
//	//
//	//mod := fr.Modulus()
//	//
//	//big2 := big.NewInt(2)
//	//
//	////big256 := big.NewInt(256)
//	////var R big.Int
//	////R.Exp(big2, big256, mod)
//	//
//	//var R2 big.Int
//	//big512 := big.NewInt(512)
//	//R2.Exp(big2, big512, mod)
//	//
//	//var R2Fr fr.Element
//	//R2Fr.SetBigInt(&R2)
//	//
//	//assert.Equal(t, r2, R2Fr.ToRegular())
//	//
//	//var R3 big.Int
//	//big768 := big.NewInt(768)
//	//R3.Exp(big2, big768, mod)
//	//
//	//var R3Fr fr.Element
//	//R3Fr.SetBigInt(&R3)
//	//R3Fr.ToRegular()
//	//
//	//fmt.Println("EXP")
//	//fmt.Println(R3Fr.ToRegular())
//	//
//	//var anotherR3 fr.Element
//	//anotherR3.Mul(&r2, &r)
//	//
//	//fmt.Println("MUL")
//	//fmt.Println(anotherR3.ToRegular())
//
//
//
//
//	//var R3 big.Int
//
//
